=begin
#API title

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.32
=end

module SwaggerClient
  class V1Api
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Remove from Favorites
    # @param variant_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_v1_carts_favorite(variant_id, opts = {})
      delete_v1_carts_favorite_with_http_info(variant_id, opts)
      nil
    end

    # Remove from Favorites
    # @param variant_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_v1_carts_favorite_with_http_info(variant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.delete_v1_carts_favorite ...'
      end
      # verify the required parameter 'variant_id' is set
      if @api_client.config.client_side_validation && variant_id.nil?
        fail ArgumentError, "Missing the required parameter 'variant_id' when calling V1Api.delete_v1_carts_favorite"
      end
      # resource path
      local_var_path = '/v1/carts/favorite'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'variant_id'] = variant_id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#delete_v1_carts_favorite\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # address delete
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_v1_customer_addresses_id(id, opts = {})
      delete_v1_customer_addresses_id_with_http_info(id, opts)
      nil
    end

    # address delete
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_v1_customer_addresses_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.delete_v1_customer_addresses_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.delete_v1_customer_addresses_id"
      end
      # resource path
      local_var_path = '/v1/customer/addresses/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#delete_v1_customer_addresses_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # remove credit cards
    # @param card_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_v1_customers_credit_cards_card_id(card_id, opts = {})
      delete_v1_customers_credit_cards_card_id_with_http_info(card_id, opts)
      nil
    end

    # remove credit cards
    # @param card_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_v1_customers_credit_cards_card_id_with_http_info(card_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.delete_v1_customers_credit_cards_card_id ...'
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling V1Api.delete_v1_customers_credit_cards_card_id"
      end
      # resource path
      local_var_path = '/v1/customers/credit_cards/{card_id}'.sub('{' + 'card_id' + '}', card_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#delete_v1_customers_credit_cards_card_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Show Min App version
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_app_version(opts = {})
      get_v1_app_version_with_http_info(opts)
      nil
    end

    # Show Min App version
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_app_version_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_app_version ...'
      end
      # resource path
      local_var_path = '/v1/app_version'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_app_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Cart
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token 
    # @option opts [Integer] :use_birth_gift 
    # @option opts [Integer] :use_rebate_points 
    # @return [nil]
    def get_v1_carts(opts = {})
      get_v1_carts_with_http_info(opts)
      nil
    end

    # Get Cart
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token 
    # @option opts [Integer] :use_birth_gift 
    # @option opts [Integer] :use_rebate_points 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_carts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_carts ...'
      end
      # resource path
      local_var_path = '/v1/carts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'use_birth_gift'] = opts[:'use_birth_gift'] if !opts[:'use_birth_gift'].nil?
      query_params[:'use_rebate_points'] = opts[:'use_rebate_points'] if !opts[:'use_rebate_points'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_carts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # get Favorites
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_carts_favorites(opts = {})
      get_v1_carts_favorites_with_http_info(opts)
      nil
    end

    # get Favorites
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_carts_favorites_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_carts_favorites ...'
      end
      # resource path
      local_var_path = '/v1/carts/favorites'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_carts_favorites\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Category Index
    # @param brand_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_categories(brand_id, opts = {})
      get_v1_categories_with_http_info(brand_id, opts)
      nil
    end

    # Category Index
    # @param brand_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_categories_with_http_info(brand_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_categories ...'
      end
      # verify the required parameter 'brand_id' is set
      if @api_client.config.client_side_validation && brand_id.nil?
        fail ArgumentError, "Missing the required parameter 'brand_id' when calling V1Api.get_v1_categories"
      end
      # resource path
      local_var_path = '/v1/categories'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'brand_id'] = brand_id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_categories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Category Show
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_categories_id(id, opts = {})
      get_v1_categories_id_with_http_info(id, opts)
      nil
    end

    # Category Show
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_categories_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_categories_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.get_v1_categories_id"
      end
      # resource path
      local_var_path = '/v1/categories/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_categories_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Collection Index
    # @param brand_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_collections(brand_id, opts = {})
      get_v1_collections_with_http_info(brand_id, opts)
      nil
    end

    # Collection Index
    # @param brand_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_collections_with_http_info(brand_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_collections ...'
      end
      # verify the required parameter 'brand_id' is set
      if @api_client.config.client_side_validation && brand_id.nil?
        fail ArgumentError, "Missing the required parameter 'brand_id' when calling V1Api.get_v1_collections"
      end
      # resource path
      local_var_path = '/v1/collections'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'brand_id'] = brand_id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_collections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Collection Show
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_collections_id(id, opts = {})
      get_v1_collections_id_with_http_info(id, opts)
      nil
    end

    # Collection Show
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_collections_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_collections_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.get_v1_collections_id"
      end
      # resource path
      local_var_path = '/v1/collections/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_collections_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # address index
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_customer_addresses(opts = {})
      get_v1_customer_addresses_with_http_info(opts)
      nil
    end

    # address index
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_customer_addresses_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_customer_addresses ...'
      end
      # resource path
      local_var_path = '/v1/customer/addresses'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_customer_addresses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # address show
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_customer_addresses_id(id, opts = {})
      get_v1_customer_addresses_id_with_http_info(id, opts)
      nil
    end

    # address show
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_customer_addresses_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_customer_addresses_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.get_v1_customer_addresses_id"
      end
      # resource path
      local_var_path = '/v1/customer/addresses/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_customer_addresses_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # get credit cards
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_customers_credit_cards(opts = {})
      get_v1_customers_credit_cards_with_http_info(opts)
      nil
    end

    # get credit cards
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_customers_credit_cards_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_customers_credit_cards ...'
      end
      # resource path
      local_var_path = '/v1/customers/credit_cards'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_customers_credit_cards\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # get primary card
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_customers_credit_cards_get_primary(opts = {})
      get_v1_customers_credit_cards_get_primary_with_http_info(opts)
      nil
    end

    # get primary card
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_customers_credit_cards_get_primary_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_customers_credit_cards_get_primary ...'
      end
      # resource path
      local_var_path = '/v1/customers/credit_cards/get_primary'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_customers_credit_cards_get_primary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # check customer exist
    # @param phone 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_customers_exist(phone, opts = {})
      get_v1_customers_exist_with_http_info(phone, opts)
      nil
    end

    # check customer exist
    # @param phone 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_customers_exist_with_http_info(phone, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_customers_exist ...'
      end
      # verify the required parameter 'phone' is set
      if @api_client.config.client_side_validation && phone.nil?
        fail ArgumentError, "Missing the required parameter 'phone' when calling V1Api.get_v1_customers_exist"
      end
      # resource path
      local_var_path = '/v1/customers/exist'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'phone'] = phone

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_customers_exist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # customer show
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_customers_me(opts = {})
      get_v1_customers_me_with_http_info(opts)
      nil
    end

    # customer show
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_customers_me_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_customers_me ...'
      end
      # resource path
      local_var_path = '/v1/customers/me'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_customers_me\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # get customer point history
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_customers_point_history(opts = {})
      get_v1_customers_point_history_with_http_info(opts)
      nil
    end

    # get customer point history
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_customers_point_history_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_customers_point_history ...'
      end
      # resource path
      local_var_path = '/v1/customers/point_history'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_customers_point_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # get customer pos order history
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_customers_pos_order_histories(opts = {})
      get_v1_customers_pos_order_histories_with_http_info(opts)
      nil
    end

    # get customer pos order history
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_customers_pos_order_histories_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_customers_pos_order_histories ...'
      end
      # resource path
      local_var_path = '/v1/customers/pos_order_histories'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_customers_pos_order_histories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # get default store
    # @param brand_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_customers_store(brand_id, opts = {})
      get_v1_customers_store_with_http_info(brand_id, opts)
      nil
    end

    # get default store
    # @param brand_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_customers_store_with_http_info(brand_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_customers_store ...'
      end
      # verify the required parameter 'brand_id' is set
      if @api_client.config.client_side_validation && brand_id.nil?
        fail ArgumentError, "Missing the required parameter 'brand_id' when calling V1Api.get_v1_customers_store"
      end
      # resource path
      local_var_path = '/v1/customers/store'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'brand_id'] = brand_id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_customers_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # customer vip barcode
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_customers_vip_barcode(opts = {})
      get_v1_customers_vip_barcode_with_http_info(opts)
      nil
    end

    # customer vip barcode
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_customers_vip_barcode_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_customers_vip_barcode ...'
      end
      # resource path
      local_var_path = '/v1/customers/vip_barcode'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_customers_vip_barcode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Event Page Index
    # @param brand_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_event_pages(brand_id, opts = {})
      get_v1_event_pages_with_http_info(brand_id, opts)
      nil
    end

    # Event Page Index
    # @param brand_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_event_pages_with_http_info(brand_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_event_pages ...'
      end
      # verify the required parameter 'brand_id' is set
      if @api_client.config.client_side_validation && brand_id.nil?
        fail ArgumentError, "Missing the required parameter 'brand_id' when calling V1Api.get_v1_event_pages"
      end
      # resource path
      local_var_path = '/v1/event_pages'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'brand_id'] = brand_id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_event_pages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Event Page Show
    # @param event_page_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_event_pages_event_page_id(event_page_id, opts = {})
      get_v1_event_pages_event_page_id_with_http_info(event_page_id, opts)
      nil
    end

    # Event Page Show
    # @param event_page_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_event_pages_event_page_id_with_http_info(event_page_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_event_pages_event_page_id ...'
      end
      # verify the required parameter 'event_page_id' is set
      if @api_client.config.client_side_validation && event_page_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_page_id' when calling V1Api.get_v1_event_pages_event_page_id"
      end
      # resource path
      local_var_path = '/v1/event_pages/{event_page_id}'.sub('{' + 'event_page_id' + '}', event_page_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_event_pages_event_page_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Home Page
    # @param brand_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_home_page(brand_id, opts = {})
      get_v1_home_page_with_http_info(brand_id, opts)
      nil
    end

    # Home Page
    # @param brand_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_home_page_with_http_info(brand_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_home_page ...'
      end
      # verify the required parameter 'brand_id' is set
      if @api_client.config.client_side_validation && brand_id.nil?
        fail ArgumentError, "Missing the required parameter 'brand_id' when calling V1Api.get_v1_home_page"
      end
      # resource path
      local_var_path = '/v1/home_page'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'brand_id'] = brand_id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_home_page\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Information Index
    # @param brand_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [Integer] :offset 
    # @return [nil]
    def get_v1_information(brand_id, opts = {})
      get_v1_information_with_http_info(brand_id, opts)
      nil
    end

    # Information Index
    # @param brand_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [Integer] :offset 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_information_with_http_info(brand_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_information ...'
      end
      # verify the required parameter 'brand_id' is set
      if @api_client.config.client_side_validation && brand_id.nil?
        fail ArgumentError, "Missing the required parameter 'brand_id' when calling V1Api.get_v1_information"
      end
      # resource path
      local_var_path = '/v1/information'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'brand_id'] = brand_id
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_information\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Information Show
    # @param information_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_information_information_id(information_id, opts = {})
      get_v1_information_information_id_with_http_info(information_id, opts)
      nil
    end

    # Information Show
    # @param information_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_information_information_id_with_http_info(information_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_information_information_id ...'
      end
      # verify the required parameter 'information_id' is set
      if @api_client.config.client_side_validation && information_id.nil?
        fail ArgumentError, "Missing the required parameter 'information_id' when calling V1Api.get_v1_information_information_id"
      end
      # resource path
      local_var_path = '/v1/information/{information_id}'.sub('{' + 'information_id' + '}', information_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_information_information_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # 維修保養單列表
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [Integer] :offset 
    # @return [nil]
    def get_v1_maintain_orders(opts = {})
      get_v1_maintain_orders_with_http_info(opts)
      nil
    end

    # 維修保養單列表
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [Integer] :offset 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_maintain_orders_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_maintain_orders ...'
      end
      # resource path
      local_var_path = '/v1/maintain_orders'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_maintain_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # 維修保養單明細
    # @param number 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_maintain_orders_number(number, opts = {})
      get_v1_maintain_orders_number_with_http_info(number, opts)
      nil
    end

    # 維修保養單明細
    # @param number 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_maintain_orders_number_with_http_info(number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_maintain_orders_number ...'
      end
      # verify the required parameter 'number' is set
      if @api_client.config.client_side_validation && number.nil?
        fail ArgumentError, "Missing the required parameter 'number' when calling V1Api.get_v1_maintain_orders_number"
      end
      # resource path
      local_var_path = '/v1/maintain_orders/{number}'.sub('{' + 'number' + '}', number.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_maintain_orders_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # 推播列表
    # @param type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset 
    # @option opts [Integer] :limit 
    # @return [nil]
    def get_v1_notifications(type, opts = {})
      get_v1_notifications_with_http_info(type, opts)
      nil
    end

    # 推播列表
    # @param type 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset 
    # @option opts [Integer] :limit 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_notifications_with_http_info(type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_notifications ...'
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling V1Api.get_v1_notifications"
      end
      # resource path
      local_var_path = '/v1/notifications'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = type
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_notifications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # 推播詳細資料
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_notifications_id(id, opts = {})
      get_v1_notifications_id_with_http_info(id, opts)
      nil
    end

    # 推播詳細資料
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_notifications_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_notifications_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.get_v1_notifications_id"
      end
      # resource path
      local_var_path = '/v1/notifications/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_notifications_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Ping 檢查能不能打
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_notifications_third_party_ping(opts = {})
      get_v1_notifications_third_party_ping_with_http_info(opts)
      nil
    end

    # Ping 檢查能不能打
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_notifications_third_party_ping_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_notifications_third_party_ping ...'
      end
      # resource path
      local_var_path = '/v1/notifications/third_party/ping'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_notifications_third_party_ping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # list Orders
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [Integer] :offset 
    # @option opts [String] :status 
    # @return [nil]
    def get_v1_orders(opts = {})
      get_v1_orders_with_http_info(opts)
      nil
    end

    # list Orders
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 
    # @option opts [Integer] :offset 
    # @option opts [String] :status 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_orders_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_orders ...'
      end
      # resource path
      local_var_path = '/v1/orders'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # 取得特定訂單
    # @param number 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_orders_number(number, opts = {})
      get_v1_orders_number_with_http_info(number, opts)
      nil
    end

    # 取得特定訂單
    # @param number 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_orders_number_with_http_info(number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_orders_number ...'
      end
      # verify the required parameter 'number' is set
      if @api_client.config.client_side_validation && number.nil?
        fail ArgumentError, "Missing the required parameter 'number' when calling V1Api.get_v1_orders_number"
      end
      # resource path
      local_var_path = '/v1/orders/{number}'.sub('{' + 'number' + '}', number.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_orders_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Product Show
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_products_id(id, opts = {})
      get_v1_products_id_with_http_info(id, opts)
      nil
    end

    # Product Show
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_products_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_products_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.get_v1_products_id"
      end
      # resource path
      local_var_path = '/v1/products/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_products_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Query Stock
    # @param variant_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_products_query_stock(variant_id, opts = {})
      get_v1_products_query_stock_with_http_info(variant_id, opts)
      nil
    end

    # Query Stock
    # @param variant_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_products_query_stock_with_http_info(variant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_products_query_stock ...'
      end
      # verify the required parameter 'variant_id' is set
      if @api_client.config.client_side_validation && variant_id.nil?
        fail ArgumentError, "Missing the required parameter 'variant_id' when calling V1Api.get_v1_products_query_stock"
      end
      # resource path
      local_var_path = '/v1/products/query_stock'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'variant_id'] = variant_id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_products_query_stock\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # 取得退貨單
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_return_orders_id(id, opts = {})
      get_v1_return_orders_id_with_http_info(id, opts)
      nil
    end

    # 取得退貨單
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_return_orders_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_return_orders_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.get_v1_return_orders_id"
      end
      # resource path
      local_var_path = '/v1/return_orders/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_return_orders_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Scrolling Text Index
    # @param brand_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_scrolling_texts(brand_id, opts = {})
      get_v1_scrolling_texts_with_http_info(brand_id, opts)
      nil
    end

    # Scrolling Text Index
    # @param brand_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_scrolling_texts_with_http_info(brand_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_scrolling_texts ...'
      end
      # verify the required parameter 'brand_id' is set
      if @api_client.config.client_side_validation && brand_id.nil?
        fail ArgumentError, "Missing the required parameter 'brand_id' when calling V1Api.get_v1_scrolling_texts"
      end
      # resource path
      local_var_path = '/v1/scrolling_texts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'brand_id'] = brand_id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_scrolling_texts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Search
    # @param keyword 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_search(keyword, opts = {})
      get_v1_search_with_http_info(keyword, opts)
      nil
    end

    # Search
    # @param keyword 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_search_with_http_info(keyword, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_search ...'
      end
      # verify the required parameter 'keyword' is set
      if @api_client.config.client_side_validation && keyword.nil?
        fail ArgumentError, "Missing the required parameter 'keyword' when calling V1Api.get_v1_search"
      end
      # resource path
      local_var_path = '/v1/search'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'keyword'] = keyword

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Series Index
    # @param brand_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_series(brand_id, opts = {})
      get_v1_series_with_http_info(brand_id, opts)
      nil
    end

    # Series Index
    # @param brand_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_series_with_http_info(brand_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_series ...'
      end
      # verify the required parameter 'brand_id' is set
      if @api_client.config.client_side_validation && brand_id.nil?
        fail ArgumentError, "Missing the required parameter 'brand_id' when calling V1Api.get_v1_series"
      end
      # resource path
      local_var_path = '/v1/series'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'brand_id'] = brand_id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_series\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Series Show
    # @param series_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_series_series_id(series_id, opts = {})
      get_v1_series_series_id_with_http_info(series_id, opts)
      nil
    end

    # Series Show
    # @param series_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_series_series_id_with_http_info(series_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_series_series_id ...'
      end
      # verify the required parameter 'series_id' is set
      if @api_client.config.client_side_validation && series_id.nil?
        fail ArgumentError, "Missing the required parameter 'series_id' when calling V1Api.get_v1_series_series_id"
      end
      # resource path
      local_var_path = '/v1/series/{series_id}'.sub('{' + 'series_id' + '}', series_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_series_series_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Store Index
    # @param brand_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_stores(brand_id, opts = {})
      get_v1_stores_with_http_info(brand_id, opts)
      nil
    end

    # Store Index
    # @param brand_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_stores_with_http_info(brand_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_stores ...'
      end
      # verify the required parameter 'brand_id' is set
      if @api_client.config.client_side_validation && brand_id.nil?
        fail ArgumentError, "Missing the required parameter 'brand_id' when calling V1Api.get_v1_stores"
      end
      # resource path
      local_var_path = '/v1/stores'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'brand_id'] = brand_id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_stores\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # SubCollection Index
    # @param brand_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_sub_collections(brand_id, opts = {})
      get_v1_sub_collections_with_http_info(brand_id, opts)
      nil
    end

    # SubCollection Index
    # @param brand_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_sub_collections_with_http_info(brand_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_sub_collections ...'
      end
      # verify the required parameter 'brand_id' is set
      if @api_client.config.client_side_validation && brand_id.nil?
        fail ArgumentError, "Missing the required parameter 'brand_id' when calling V1Api.get_v1_sub_collections"
      end
      # resource path
      local_var_path = '/v1/sub_collections'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'brand_id'] = brand_id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_sub_collections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # SubCollection Show
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_sub_collections_id(id, opts = {})
      get_v1_sub_collections_id_with_http_info(id, opts)
      nil
    end

    # SubCollection Show
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_sub_collections_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_sub_collections_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.get_v1_sub_collections_id"
      end
      # resource path
      local_var_path = '/v1/sub_collections/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_sub_collections_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # 取得退貨子訂單
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_sub_orders_id(id, opts = {})
      get_v1_sub_orders_id_with_http_info(id, opts)
      nil
    end

    # 取得退貨子訂單
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_sub_orders_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_sub_orders_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.get_v1_sub_orders_id"
      end
      # resource path
      local_var_path = '/v1/sub_orders/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_sub_orders_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # TargetPriceDiscount Index
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_target_price_discounts(opts = {})
      get_v1_target_price_discounts_with_http_info(opts)
      nil
    end

    # TargetPriceDiscount Index
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_target_price_discounts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_target_price_discounts ...'
      end
      # resource path
      local_var_path = '/v1/target_price_discounts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_target_price_discounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Show Top Banner
    # @param brand_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_v1_top_banner(brand_id, opts = {})
      get_v1_top_banner_with_http_info(brand_id, opts)
      nil
    end

    # Show Top Banner
    # @param brand_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_v1_top_banner_with_http_info(brand_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.get_v1_top_banner ...'
      end
      # verify the required parameter 'brand_id' is set
      if @api_client.config.client_side_validation && brand_id.nil?
        fail ArgumentError, "Missing the required parameter 'brand_id' when calling V1Api.get_v1_top_banner"
      end
      # resource path
      local_var_path = '/v1/top_banner'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'brand_id'] = brand_id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#get_v1_top_banner\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Cart
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_v1_carts(body, opts = {})
      post_v1_carts_with_http_info(body, opts)
      nil
    end

    # Update Cart
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_carts_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_carts ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V1Api.post_v1_carts"
      end
      # resource path
      local_var_path = '/v1/carts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_carts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add to Favorite
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_v1_carts_add_favorites(body, opts = {})
      post_v1_carts_add_favorites_with_http_info(body, opts)
      nil
    end

    # Add to Favorite
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_carts_add_favorites_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_carts_add_favorites ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V1Api.post_v1_carts_add_favorites"
      end
      # resource path
      local_var_path = '/v1/carts/add_favorites'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_carts_add_favorites\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # address create
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_v1_customer_addresses(body, opts = {})
      post_v1_customer_addresses_with_http_info(body, opts)
      nil
    end

    # address create
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_customer_addresses_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_customer_addresses ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V1Api.post_v1_customer_addresses"
      end
      # resource path
      local_var_path = '/v1/customer/addresses'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_customer_addresses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # customer register
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_v1_customers(body, opts = {})
      post_v1_customers_with_http_info(body, opts)
      nil
    end

    # customer register
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_customers_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_customers ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V1Api.post_v1_customers"
      end
      # resource path
      local_var_path = '/v1/customers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_customers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # bind credit card
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_v1_customers_credit_cards(body, opts = {})
      post_v1_customers_credit_cards_with_http_info(body, opts)
      nil
    end

    # bind credit card
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_customers_credit_cards_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_customers_credit_cards ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V1Api.post_v1_customers_credit_cards"
      end
      # resource path
      local_var_path = '/v1/customers/credit_cards'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_customers_credit_cards\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # set primary card
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_v1_customers_credit_cards_set_primary(body, opts = {})
      post_v1_customers_credit_cards_set_primary_with_http_info(body, opts)
      nil
    end

    # set primary card
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_customers_credit_cards_set_primary_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_customers_credit_cards_set_primary ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V1Api.post_v1_customers_credit_cards_set_primary"
      end
      # resource path
      local_var_path = '/v1/customers/credit_cards/set_primary'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_customers_credit_cards_set_primary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # login with otp
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_v1_customers_login_with_otp(body, opts = {})
      post_v1_customers_login_with_otp_with_http_info(body, opts)
      nil
    end

    # login with otp
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_customers_login_with_otp_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_customers_login_with_otp ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V1Api.post_v1_customers_login_with_otp"
      end
      # resource path
      local_var_path = '/v1/customers/login_with_otp'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_customers_login_with_otp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # customer request otp
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_v1_customers_otp(body, opts = {})
      post_v1_customers_otp_with_http_info(body, opts)
      nil
    end

    # customer request otp
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_customers_otp_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_customers_otp ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V1Api.post_v1_customers_otp"
      end
      # resource path
      local_var_path = '/v1/customers/otp'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_customers_otp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # 接收推播
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_v1_customers_receive_notifications(body, opts = {})
      post_v1_customers_receive_notifications_with_http_info(body, opts)
      nil
    end

    # 接收推播
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_customers_receive_notifications_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_customers_receive_notifications ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V1Api.post_v1_customers_receive_notifications"
      end
      # resource path
      local_var_path = '/v1/customers/receive_notifications'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_customers_receive_notifications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # reset password
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_v1_customers_reset_password(body, opts = {})
      post_v1_customers_reset_password_with_http_info(body, opts)
      nil
    end

    # reset password
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_customers_reset_password_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_customers_reset_password ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V1Api.post_v1_customers_reset_password"
      end
      # resource path
      local_var_path = '/v1/customers/reset_password'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_customers_reset_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # set default store
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_v1_customers_set_default_store(body, opts = {})
      post_v1_customers_set_default_store_with_http_info(body, opts)
      nil
    end

    # set default store
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_customers_set_default_store_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_customers_set_default_store ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V1Api.post_v1_customers_set_default_store"
      end
      # resource path
      local_var_path = '/v1/customers/set_default_store'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_customers_set_default_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # SSO
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_v1_customers_sso(body, opts = {})
      post_v1_customers_sso_with_http_info(body, opts)
      nil
    end

    # SSO
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_customers_sso_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_customers_sso ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V1Api.post_v1_customers_sso"
      end
      # resource path
      local_var_path = '/v1/customers/sso'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_customers_sso\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # bind
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_v1_customers_sso_bind(body, opts = {})
      post_v1_customers_sso_bind_with_http_info(body, opts)
      nil
    end

    # bind
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_customers_sso_bind_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_customers_sso_bind ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V1Api.post_v1_customers_sso_bind"
      end
      # resource path
      local_var_path = '/v1/customers/sso_bind'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_customers_sso_bind\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # unbind
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_v1_customers_sso_unbind(body, opts = {})
      post_v1_customers_sso_unbind_with_http_info(body, opts)
      nil
    end

    # unbind
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_customers_sso_unbind_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_customers_sso_unbind ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V1Api.post_v1_customers_sso_unbind"
      end
      # resource path
      local_var_path = '/v1/customers/sso_unbind'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_customers_sso_unbind\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # sync customer with pos
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_v1_customers_sync_pos(opts = {})
      post_v1_customers_sync_pos_with_http_info(opts)
      nil
    end

    # sync customer with pos
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_customers_sync_pos_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_customers_sync_pos ...'
      end
      # resource path
      local_var_path = '/v1/customers/sync_pos'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_customers_sync_pos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # customer update
    # @param [Hash] opts the optional parameters
    # @option opts [CustomersUpdateBody] :body 
    # @return [nil]
    def post_v1_customers_update(opts = {})
      post_v1_customers_update_with_http_info(opts)
      nil
    end

    # customer update
    # @param [Hash] opts the optional parameters
    # @option opts [CustomersUpdateBody] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_customers_update_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_customers_update ...'
      end
      # resource path
      local_var_path = '/v1/customers/update'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_customers_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # update password
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_v1_customers_update_password(body, opts = {})
      post_v1_customers_update_password_with_http_info(body, opts)
      nil
    end

    # update password
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_customers_update_password_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_customers_update_password ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V1Api.post_v1_customers_update_password"
      end
      # resource path
      local_var_path = '/v1/customers/update_password'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_customers_update_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # customer validate otp
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_v1_customers_validate_otp(body, opts = {})
      post_v1_customers_validate_otp_with_http_info(body, opts)
      nil
    end

    # customer validate otp
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_customers_validate_otp_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_customers_validate_otp ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V1Api.post_v1_customers_validate_otp"
      end
      # resource path
      local_var_path = '/v1/customers/validate_otp'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_customers_validate_otp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # validate password
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_v1_customers_validate_password(body, opts = {})
      post_v1_customers_validate_password_with_http_info(body, opts)
      nil
    end

    # validate password
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_customers_validate_password_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_customers_validate_password ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V1Api.post_v1_customers_validate_password"
      end
      # resource path
      local_var_path = '/v1/customers/validate_password'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_customers_validate_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # 創建維修保養單
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_v1_maintain_orders(body, opts = {})
      post_v1_maintain_orders_with_http_info(body, opts)
      nil
    end

    # 創建維修保養單
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_maintain_orders_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_maintain_orders ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V1Api.post_v1_maintain_orders"
      end
      # resource path
      local_var_path = '/v1/maintain_orders'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_maintain_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # 取消維修保養單
    # @param number 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_v1_maintain_orders_number_cancel(number, opts = {})
      post_v1_maintain_orders_number_cancel_with_http_info(number, opts)
      nil
    end

    # 取消維修保養單
    # @param number 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_maintain_orders_number_cancel_with_http_info(number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_maintain_orders_number_cancel ...'
      end
      # verify the required parameter 'number' is set
      if @api_client.config.client_side_validation && number.nil?
        fail ArgumentError, "Missing the required parameter 'number' when calling V1Api.post_v1_maintain_orders_number_cancel"
      end
      # resource path
      local_var_path = '/v1/maintain_orders/{number}/cancel'.sub('{' + 'number' + '}', number.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_maintain_orders_number_cancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # 同意或取消報價
    # @param body 
    # @param number 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_v1_maintain_orders_number_quotation(body, number, opts = {})
      post_v1_maintain_orders_number_quotation_with_http_info(body, number, opts)
      nil
    end

    # 同意或取消報價
    # @param body 
    # @param number 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_maintain_orders_number_quotation_with_http_info(body, number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_maintain_orders_number_quotation ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V1Api.post_v1_maintain_orders_number_quotation"
      end
      # verify the required parameter 'number' is set
      if @api_client.config.client_side_validation && number.nil?
        fail ArgumentError, "Missing the required parameter 'number' when calling V1Api.post_v1_maintain_orders_number_quotation"
      end
      # resource path
      local_var_path = '/v1/maintain_orders/{number}/quotation'.sub('{' + 'number' + '}', number.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_maintain_orders_number_quotation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # 推播註冊
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_v1_notification_bind(body, opts = {})
      post_v1_notification_bind_with_http_info(body, opts)
      nil
    end

    # 推播註冊
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_notification_bind_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_notification_bind ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V1Api.post_v1_notification_bind"
      end
      # resource path
      local_var_path = '/v1/notification/bind'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_notification_bind\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # 解除推播註冊
    # @param [Hash] opts the optional parameters
    # @option opts [NotificationUnbindBody] :body 
    # @return [nil]
    def post_v1_notification_unbind(opts = {})
      post_v1_notification_unbind_with_http_info(opts)
      nil
    end

    # 解除推播註冊
    # @param [Hash] opts the optional parameters
    # @option opts [NotificationUnbindBody] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_notification_unbind_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_notification_unbind ...'
      end
      # resource path
      local_var_path = '/v1/notification/unbind'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_notification_unbind\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # 已讀單筆訂單
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_v1_notifications_read(body, opts = {})
      post_v1_notifications_read_with_http_info(body, opts)
      nil
    end

    # 已讀單筆訂單
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_notifications_read_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_notifications_read ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V1Api.post_v1_notifications_read"
      end
      # resource path
      local_var_path = '/v1/notifications/read'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_notifications_read\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # 已讀多筆訂單
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_v1_notifications_read_all(body, opts = {})
      post_v1_notifications_read_all_with_http_info(body, opts)
      nil
    end

    # 已讀多筆訂單
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_notifications_read_all_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_notifications_read_all ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V1Api.post_v1_notifications_read_all"
      end
      # resource path
      local_var_path = '/v1/notifications/read_all'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_notifications_read_all\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # 第三方推播
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_v1_notifications_third_party(body, opts = {})
      post_v1_notifications_third_party_with_http_info(body, opts)
      nil
    end

    # 第三方推播
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_notifications_third_party_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_notifications_third_party ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V1Api.post_v1_notifications_third_party"
      end
      # resource path
      local_var_path = '/v1/notifications/third_party'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_notifications_third_party\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [Deprecated] 取得語系
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_v1_notifications_third_party_customer_locale(body, opts = {})
      post_v1_notifications_third_party_customer_locale_with_http_info(body, opts)
      nil
    end

    # [Deprecated] 取得語系
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_notifications_third_party_customer_locale_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_notifications_third_party_customer_locale ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V1Api.post_v1_notifications_third_party_customer_locale"
      end
      # resource path
      local_var_path = '/v1/notifications/third_party/customer_locale'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_notifications_third_party_customer_locale\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # 推播 Demo
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_v1_notifications_third_party_demo(body, opts = {})
      post_v1_notifications_third_party_demo_with_http_info(body, opts)
      nil
    end

    # 推播 Demo
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_notifications_third_party_demo_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_notifications_third_party_demo ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V1Api.post_v1_notifications_third_party_demo"
      end
      # resource path
      local_var_path = '/v1/notifications/third_party/demo'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_notifications_third_party_demo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # 創建訂單
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_v1_orders(body, opts = {})
      post_v1_orders_with_http_info(body, opts)
      nil
    end

    # 創建訂單
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_orders_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_orders ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V1Api.post_v1_orders"
      end
      # resource path
      local_var_path = '/v1/orders'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # 取消特定訂單
    # @param number 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_v1_orders_number_cancel(number, opts = {})
      post_v1_orders_number_cancel_with_http_info(number, opts)
      nil
    end

    # 取消特定訂單
    # @param number 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_orders_number_cancel_with_http_info(number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_orders_number_cancel ...'
      end
      # verify the required parameter 'number' is set
      if @api_client.config.client_side_validation && number.nil?
        fail ArgumentError, "Missing the required parameter 'number' when calling V1Api.post_v1_orders_number_cancel"
      end
      # resource path
      local_var_path = '/v1/orders/{number}/cancel'.sub('{' + 'number' + '}', number.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_orders_number_cancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # 結帳失敗後，做重新結帳的動作
    # @param body 
    # @param number 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_v1_orders_number_checkout(body, number, opts = {})
      post_v1_orders_number_checkout_with_http_info(body, number, opts)
      nil
    end

    # 結帳失敗後，做重新結帳的動作
    # @param body 
    # @param number 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_orders_number_checkout_with_http_info(body, number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_orders_number_checkout ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V1Api.post_v1_orders_number_checkout"
      end
      # verify the required parameter 'number' is set
      if @api_client.config.client_side_validation && number.nil?
        fail ArgumentError, "Missing the required parameter 'number' when calling V1Api.post_v1_orders_number_checkout"
      end
      # resource path
      local_var_path = '/v1/orders/{number}/checkout'.sub('{' + 'number' + '}', number.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_orders_number_checkout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Product Index
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_v1_products(body, opts = {})
      post_v1_products_with_http_info(body, opts)
      nil
    end

    # Product Index
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_products_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_products ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V1Api.post_v1_products"
      end
      # resource path
      local_var_path = '/v1/products'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_products\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # 退貨表單送出
    # @param body 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_v1_return_orders_id(body, id, opts = {})
      post_v1_return_orders_id_with_http_info(body, id, opts)
      nil
    end

    # 退貨表單送出
    # @param body 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_return_orders_id_with_http_info(body, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_return_orders_id ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V1Api.post_v1_return_orders_id"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.post_v1_return_orders_id"
      end
      # resource path
      local_var_path = '/v1/return_orders/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_return_orders_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # 取得返還金額、購物金
    # @param body 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_v1_return_orders_pre_calculate_id(body, id, opts = {})
      post_v1_return_orders_pre_calculate_id_with_http_info(body, id, opts)
      nil
    end

    # 取得返還金額、購物金
    # @param body 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_v1_return_orders_pre_calculate_id_with_http_info(body, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.post_v1_return_orders_pre_calculate_id ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V1Api.post_v1_return_orders_pre_calculate_id"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.post_v1_return_orders_pre_calculate_id"
      end
      # resource path
      local_var_path = '/v1/return_orders/pre_calculate/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#post_v1_return_orders_pre_calculate_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # address update
    # @param body 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def put_v1_customer_addresses_id(body, id, opts = {})
      put_v1_customer_addresses_id_with_http_info(body, id, opts)
      nil
    end

    # address update
    # @param body 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def put_v1_customer_addresses_id_with_http_info(body, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V1Api.put_v1_customer_addresses_id ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V1Api.put_v1_customer_addresses_id"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling V1Api.put_v1_customer_addresses_id"
      end
      # resource path
      local_var_path = '/v1/customer/addresses/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V1Api#put_v1_customer_addresses_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
