=begin
#API title

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.32
=end

require 'date'

module SwaggerClient
  class V1OrdersBody
    attr_accessor :items_variant_id

    attr_accessor :items_quantity

    attr_accessor :credit_card_id

    attr_accessor :use_birth_gift

    attr_accessor :use_rebate_points

    attr_accessor :shipping_type

    attr_accessor :receiver_name

    attr_accessor :receiver_phone

    attr_accessor :zip

    attr_accessor :city

    attr_accessor :district

    attr_accessor :address

    attr_accessor :cvs_number

    attr_accessor :cvs_store_name

    attr_accessor :cvs_store_type

    # 載具類型
    attr_accessor :e_gui_type

    # 載具號碼
    attr_accessor :e_gui_carrier

    # 統一編號
    attr_accessor :e_gui_tax_number

    attr_accessor :installment

    # 發票地址
    attr_accessor :invoice_address

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'items_variant_id' => :'items[variant_id]',
        :'items_quantity' => :'items[quantity]',
        :'credit_card_id' => :'credit_card_id',
        :'use_birth_gift' => :'use_birth_gift',
        :'use_rebate_points' => :'use_rebate_points',
        :'shipping_type' => :'shipping_type',
        :'receiver_name' => :'receiver_name',
        :'receiver_phone' => :'receiver_phone',
        :'zip' => :'zip',
        :'city' => :'city',
        :'district' => :'district',
        :'address' => :'address',
        :'cvs_number' => :'cvs_number',
        :'cvs_store_name' => :'cvs_store_name',
        :'cvs_store_type' => :'cvs_store_type',
        :'e_gui_type' => :'e_gui_type',
        :'e_gui_carrier' => :'e_gui_carrier',
        :'e_gui_tax_number' => :'e_gui_tax_number',
        :'installment' => :'installment',
        :'invoice_address' => :'invoice_address'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'items_variant_id' => :'Object',
        :'items_quantity' => :'Object',
        :'credit_card_id' => :'Object',
        :'use_birth_gift' => :'Object',
        :'use_rebate_points' => :'Object',
        :'shipping_type' => :'Object',
        :'receiver_name' => :'Object',
        :'receiver_phone' => :'Object',
        :'zip' => :'Object',
        :'city' => :'Object',
        :'district' => :'Object',
        :'address' => :'Object',
        :'cvs_number' => :'Object',
        :'cvs_store_name' => :'Object',
        :'cvs_store_type' => :'Object',
        :'e_gui_type' => :'Object',
        :'e_gui_carrier' => :'Object',
        :'e_gui_tax_number' => :'Object',
        :'installment' => :'Object',
        :'invoice_address' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::V1OrdersBody` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::V1OrdersBody`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'items_variant_id')
        if (value = attributes[:'items_variant_id']).is_a?(Array)
          self.items_variant_id = value
        end
      end

      if attributes.key?(:'items_quantity')
        if (value = attributes[:'items_quantity']).is_a?(Array)
          self.items_quantity = value
        end
      end

      if attributes.key?(:'credit_card_id')
        self.credit_card_id = attributes[:'credit_card_id']
      end

      if attributes.key?(:'use_birth_gift')
        self.use_birth_gift = attributes[:'use_birth_gift']
      end

      if attributes.key?(:'use_rebate_points')
        self.use_rebate_points = attributes[:'use_rebate_points']
      end

      if attributes.key?(:'shipping_type')
        self.shipping_type = attributes[:'shipping_type']
      end

      if attributes.key?(:'receiver_name')
        self.receiver_name = attributes[:'receiver_name']
      end

      if attributes.key?(:'receiver_phone')
        self.receiver_phone = attributes[:'receiver_phone']
      end

      if attributes.key?(:'zip')
        self.zip = attributes[:'zip']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'district')
        self.district = attributes[:'district']
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'cvs_number')
        self.cvs_number = attributes[:'cvs_number']
      end

      if attributes.key?(:'cvs_store_name')
        self.cvs_store_name = attributes[:'cvs_store_name']
      end

      if attributes.key?(:'cvs_store_type')
        self.cvs_store_type = attributes[:'cvs_store_type']
      end

      if attributes.key?(:'e_gui_type')
        self.e_gui_type = attributes[:'e_gui_type']
      end

      if attributes.key?(:'e_gui_carrier')
        self.e_gui_carrier = attributes[:'e_gui_carrier']
      end

      if attributes.key?(:'e_gui_tax_number')
        self.e_gui_tax_number = attributes[:'e_gui_tax_number']
      end

      if attributes.key?(:'installment')
        self.installment = attributes[:'installment']
      end

      if attributes.key?(:'invoice_address')
        self.invoice_address = attributes[:'invoice_address']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @items_variant_id.nil?
        invalid_properties.push('invalid value for "items_variant_id", items_variant_id cannot be nil.')
      end

      if @items_quantity.nil?
        invalid_properties.push('invalid value for "items_quantity", items_quantity cannot be nil.')
      end

      if @credit_card_id.nil?
        invalid_properties.push('invalid value for "credit_card_id", credit_card_id cannot be nil.')
      end

      if @shipping_type.nil?
        invalid_properties.push('invalid value for "shipping_type", shipping_type cannot be nil.')
      end

      if @receiver_name.nil?
        invalid_properties.push('invalid value for "receiver_name", receiver_name cannot be nil.')
      end

      if @receiver_phone.nil?
        invalid_properties.push('invalid value for "receiver_phone", receiver_phone cannot be nil.')
      end

      if @e_gui_type.nil?
        invalid_properties.push('invalid value for "e_gui_type", e_gui_type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @items_variant_id.nil?
      return false if @items_quantity.nil?
      return false if @credit_card_id.nil?
      return false if @shipping_type.nil?
      return false if @receiver_name.nil?
      return false if @receiver_phone.nil?
      return false if @e_gui_type.nil?
      e_gui_type_validator = EnumAttributeValidator.new('Object', ['b2b', 'ecpay', 'mobile'])
      return false unless e_gui_type_validator.valid?(@e_gui_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] e_gui_type Object to be assigned
    def e_gui_type=(e_gui_type)
      validator = EnumAttributeValidator.new('Object', ['b2b', 'ecpay', 'mobile'])
      unless validator.valid?(e_gui_type)
        fail ArgumentError, "invalid value for \"e_gui_type\", must be one of #{validator.allowable_values}."
      end
      @e_gui_type = e_gui_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          items_variant_id == o.items_variant_id &&
          items_quantity == o.items_quantity &&
          credit_card_id == o.credit_card_id &&
          use_birth_gift == o.use_birth_gift &&
          use_rebate_points == o.use_rebate_points &&
          shipping_type == o.shipping_type &&
          receiver_name == o.receiver_name &&
          receiver_phone == o.receiver_phone &&
          zip == o.zip &&
          city == o.city &&
          district == o.district &&
          address == o.address &&
          cvs_number == o.cvs_number &&
          cvs_store_name == o.cvs_store_name &&
          cvs_store_type == o.cvs_store_type &&
          e_gui_type == o.e_gui_type &&
          e_gui_carrier == o.e_gui_carrier &&
          e_gui_tax_number == o.e_gui_tax_number &&
          installment == o.installment &&
          invoice_address == o.invoice_address
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [items_variant_id, items_quantity, credit_card_id, use_birth_gift, use_rebate_points, shipping_type, receiver_name, receiver_phone, zip, city, district, address, cvs_number, cvs_store_name, cvs_store_type, e_gui_type, e_gui_carrier, e_gui_tax_number, installment, invoice_address].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
