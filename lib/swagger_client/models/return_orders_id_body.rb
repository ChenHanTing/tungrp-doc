=begin
#API title

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.32
=end

require 'date'

module SwaggerClient
  class ReturnOrdersIdBody
    attr_accessor :receiver_name

    attr_accessor :receiver_phone

    attr_accessor :zip

    attr_accessor :city

    attr_accessor :district

    attr_accessor :address

    # 商品ID
    attr_accessor :items_variant_id

    # 退貨數量
    attr_accessor :items_quantity

    # 取消原因
    attr_accessor :items_cancel_reason

    attr_accessor :pics

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'receiver_name' => :'receiver_name',
        :'receiver_phone' => :'receiver_phone',
        :'zip' => :'zip',
        :'city' => :'city',
        :'district' => :'district',
        :'address' => :'address',
        :'items_variant_id' => :'items[variant_id]',
        :'items_quantity' => :'items[quantity]',
        :'items_cancel_reason' => :'items[cancel_reason]',
        :'pics' => :'pics[]'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'receiver_name' => :'Object',
        :'receiver_phone' => :'Object',
        :'zip' => :'Object',
        :'city' => :'Object',
        :'district' => :'Object',
        :'address' => :'Object',
        :'items_variant_id' => :'Object',
        :'items_quantity' => :'Object',
        :'items_cancel_reason' => :'Object',
        :'pics' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::ReturnOrdersIdBody` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::ReturnOrdersIdBody`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'receiver_name')
        self.receiver_name = attributes[:'receiver_name']
      end

      if attributes.key?(:'receiver_phone')
        self.receiver_phone = attributes[:'receiver_phone']
      end

      if attributes.key?(:'zip')
        self.zip = attributes[:'zip']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'district')
        self.district = attributes[:'district']
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'items_variant_id')
        if (value = attributes[:'items_variant_id']).is_a?(Array)
          self.items_variant_id = value
        end
      end

      if attributes.key?(:'items_quantity')
        if (value = attributes[:'items_quantity']).is_a?(Array)
          self.items_quantity = value
        end
      end

      if attributes.key?(:'items_cancel_reason')
        if (value = attributes[:'items_cancel_reason']).is_a?(Array)
          self.items_cancel_reason = value
        end
      end

      if attributes.key?(:'pics')
        if (value = attributes[:'pics']).is_a?(Array)
          self.pics = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @receiver_name.nil?
        invalid_properties.push('invalid value for "receiver_name", receiver_name cannot be nil.')
      end

      if @receiver_phone.nil?
        invalid_properties.push('invalid value for "receiver_phone", receiver_phone cannot be nil.')
      end

      if @address.nil?
        invalid_properties.push('invalid value for "address", address cannot be nil.')
      end

      if @items_variant_id.nil?
        invalid_properties.push('invalid value for "items_variant_id", items_variant_id cannot be nil.')
      end

      if @items_quantity.nil?
        invalid_properties.push('invalid value for "items_quantity", items_quantity cannot be nil.')
      end

      if @items_cancel_reason.nil?
        invalid_properties.push('invalid value for "items_cancel_reason", items_cancel_reason cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @receiver_name.nil?
      return false if @receiver_phone.nil?
      return false if @address.nil?
      return false if @items_variant_id.nil?
      return false if @items_quantity.nil?
      return false if @items_cancel_reason.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          receiver_name == o.receiver_name &&
          receiver_phone == o.receiver_phone &&
          zip == o.zip &&
          city == o.city &&
          district == o.district &&
          address == o.address &&
          items_variant_id == o.items_variant_id &&
          items_quantity == o.items_quantity &&
          items_cancel_reason == o.items_cancel_reason &&
          pics == o.pics
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [receiver_name, receiver_phone, zip, city, district, address, items_variant_id, items_quantity, items_cancel_reason, pics].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
