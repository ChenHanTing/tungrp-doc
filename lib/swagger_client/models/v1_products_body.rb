=begin
#API title

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.32
=end

require 'date'

module SwaggerClient
  class V1ProductsBody
    attr_accessor :brand_id

    attr_accessor :offset

    attr_accessor :limit

    attr_accessor :sort_by

    attr_accessor :search

    attr_accessor :search_filter_br

    attr_accessor :search_filter_metal

    attr_accessor :search_filter_gem

    attr_accessor :search_filter_size

    attr_accessor :search_filter_cat

    attr_accessor :search_filter_pattern

    attr_accessor :search_filter_color

    attr_accessor :search_filter_theme

    attr_accessor :search_filter_series

    attr_accessor :collection_ids

    attr_accessor :keyword

    attr_accessor :sub_collection_ids

    attr_accessor :series_id

    attr_accessor :category_ids

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'brand_id' => :'brand_id',
        :'offset' => :'offset',
        :'limit' => :'limit',
        :'sort_by' => :'sort_by',
        :'search' => :'search',
        :'search_filter_br' => :'search[filter_br]',
        :'search_filter_metal' => :'search[filter_metal]',
        :'search_filter_gem' => :'search[filter_gem]',
        :'search_filter_size' => :'search[filter_size]',
        :'search_filter_cat' => :'search[filter_cat]',
        :'search_filter_pattern' => :'search[filter_pattern]',
        :'search_filter_color' => :'search[filter_color]',
        :'search_filter_theme' => :'search[filter_theme]',
        :'search_filter_series' => :'search[filter_series]',
        :'collection_ids' => :'collection_ids',
        :'keyword' => :'keyword',
        :'sub_collection_ids' => :'sub_collection_ids',
        :'series_id' => :'series_id',
        :'category_ids' => :'category_ids'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'brand_id' => :'Object',
        :'offset' => :'Object',
        :'limit' => :'Object',
        :'sort_by' => :'Object',
        :'search' => :'Object',
        :'search_filter_br' => :'Object',
        :'search_filter_metal' => :'Object',
        :'search_filter_gem' => :'Object',
        :'search_filter_size' => :'Object',
        :'search_filter_cat' => :'Object',
        :'search_filter_pattern' => :'Object',
        :'search_filter_color' => :'Object',
        :'search_filter_theme' => :'Object',
        :'search_filter_series' => :'Object',
        :'collection_ids' => :'Object',
        :'keyword' => :'Object',
        :'sub_collection_ids' => :'Object',
        :'series_id' => :'Object',
        :'category_ids' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::V1ProductsBody` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::V1ProductsBody`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'brand_id')
        self.brand_id = attributes[:'brand_id']
      end

      if attributes.key?(:'offset')
        self.offset = attributes[:'offset']
      end

      if attributes.key?(:'limit')
        self.limit = attributes[:'limit']
      end

      if attributes.key?(:'sort_by')
        self.sort_by = attributes[:'sort_by']
      end

      if attributes.key?(:'search')
        self.search = attributes[:'search']
      end

      if attributes.key?(:'search_filter_br')
        if (value = attributes[:'search_filter_br']).is_a?(Array)
          self.search_filter_br = value
        end
      end

      if attributes.key?(:'search_filter_metal')
        if (value = attributes[:'search_filter_metal']).is_a?(Array)
          self.search_filter_metal = value
        end
      end

      if attributes.key?(:'search_filter_gem')
        if (value = attributes[:'search_filter_gem']).is_a?(Array)
          self.search_filter_gem = value
        end
      end

      if attributes.key?(:'search_filter_size')
        if (value = attributes[:'search_filter_size']).is_a?(Array)
          self.search_filter_size = value
        end
      end

      if attributes.key?(:'search_filter_cat')
        if (value = attributes[:'search_filter_cat']).is_a?(Array)
          self.search_filter_cat = value
        end
      end

      if attributes.key?(:'search_filter_pattern')
        if (value = attributes[:'search_filter_pattern']).is_a?(Array)
          self.search_filter_pattern = value
        end
      end

      if attributes.key?(:'search_filter_color')
        if (value = attributes[:'search_filter_color']).is_a?(Array)
          self.search_filter_color = value
        end
      end

      if attributes.key?(:'search_filter_theme')
        if (value = attributes[:'search_filter_theme']).is_a?(Array)
          self.search_filter_theme = value
        end
      end

      if attributes.key?(:'search_filter_series')
        if (value = attributes[:'search_filter_series']).is_a?(Array)
          self.search_filter_series = value
        end
      end

      if attributes.key?(:'collection_ids')
        if (value = attributes[:'collection_ids']).is_a?(Array)
          self.collection_ids = value
        end
      end

      if attributes.key?(:'keyword')
        self.keyword = attributes[:'keyword']
      end

      if attributes.key?(:'sub_collection_ids')
        if (value = attributes[:'sub_collection_ids']).is_a?(Array)
          self.sub_collection_ids = value
        end
      end

      if attributes.key?(:'series_id')
        self.series_id = attributes[:'series_id']
      end

      if attributes.key?(:'category_ids')
        if (value = attributes[:'category_ids']).is_a?(Array)
          self.category_ids = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @offset.nil?
        invalid_properties.push('invalid value for "offset", offset cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @offset.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          brand_id == o.brand_id &&
          offset == o.offset &&
          limit == o.limit &&
          sort_by == o.sort_by &&
          search == o.search &&
          search_filter_br == o.search_filter_br &&
          search_filter_metal == o.search_filter_metal &&
          search_filter_gem == o.search_filter_gem &&
          search_filter_size == o.search_filter_size &&
          search_filter_cat == o.search_filter_cat &&
          search_filter_pattern == o.search_filter_pattern &&
          search_filter_color == o.search_filter_color &&
          search_filter_theme == o.search_filter_theme &&
          search_filter_series == o.search_filter_series &&
          collection_ids == o.collection_ids &&
          keyword == o.keyword &&
          sub_collection_ids == o.sub_collection_ids &&
          series_id == o.series_id &&
          category_ids == o.category_ids
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [brand_id, offset, limit, sort_by, search, search_filter_br, search_filter_metal, search_filter_gem, search_filter_size, search_filter_cat, search_filter_pattern, search_filter_color, search_filter_theme, search_filter_series, collection_ids, keyword, sub_collection_ids, series_id, category_ids].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
